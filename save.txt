from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from AddStudent import Ui_Dialog as add
from DeleteStudent import Ui_Dialog as remove
from EditStudent import Ui_Dialog as edit
from Display import Ui_Dialog as afficher
from SearchStudentNInscr import Ui_Dialog as rechercherNumeroInscription
from SearchStudentSection import Ui_Dialog as rechercherSection
from SearchStudentNiveau import Ui_Dialog as rechercherNiveau
from SearchStudentSectionNiveau import Ui_Dialog as rechercherSectionNiveau
from AddSubject import Ui_Dialog as ajouterMatiere
from DeleteSubject import Ui_Dialog as supprimerMatiere
from EditSubject import Ui_Dialog as modifierMatiere
from DisplaySubject import Ui_Dialog as afficherMatiere
from SearchSubjectCode import Ui_Dialog as rechercherMatiereCode
from SearchSubjectSection import Ui_Dialog as rechercherMatiereSection
from SearchSubjectSectionSemestre import Ui_Dialog as rechercherMatiereSectionSemestre
from AddGrade import Ui_Dialog as ajouterNote
from DeleteGrade import Ui_Dialog as supprimerNote
from EditGrade import Ui_Dialog as modifierNote
from DisplayGrade import Ui_Dialog as afficherNote
from SearchGradeNInscr import Ui_Dialog as rechercherNoteNumeroInscription
from SearchGradeSectionNiveau import Ui_Dialog as rechercherNoteSectionNiveau
from SearchGradeNumeroInscriptionSemestre import Ui_Dialog as rechercherNoteNumeroInscriptionSemestre
from ReportCard import Ui_Dialog as bulletinNoteEtudiant
from Student import Etudiant
from Subject import Matiere
from Grade import Note

class Ui_MainWindow(object):
    def ajouterEtudiant(self):
        self.setupStacked(2)
        self.stackedWidget.setCurrentWidget(self.windowAjouter)

    def supprimerEtudiant(self):
        self.setupStacked(3)
        self.stackedWidget.setCurrentWidget(self.windowSupprimer)
    
    def modifierEtudiant(self):
        self.setupStacked(4)
        self.stackedWidget.setCurrentWidget(self.windowModifier)
    def afficherEtudiant(self):
        self.setupStacked(5)
        self.stackedWidget.setCurrentWidget(self.windowAfficher)
    def rechercherNumeroInscription(self):
        self.setupStacked(6)
        self.stackedWidget.setCurrentWidget(self.windowRechercherNumeroInscription)
    def rechercherSection(self):
        self.setupStacked(7)
        self.stackedWidget.setCurrentWidget(self.windowRechercherSection)
    def rechercherNiveau(self):
        self.setupStacked(8)
        self.stackedWidget.setCurrentWidget(self.windowRechercherNiveau)
    def rechercherSectionNiveau(self):
        self.setupStacked(9)
        self.stackedWidget.setCurrentWidget(self.windowRechercherSectionNiveau)
    
    def ajouterMatiere(self):
        self.setupStacked(10)
        self.stackedWidget.setCurrentWidget(self.windowAjouterMatiere)
    def supprimerMatiere(self):
        self.setupStacked(11)
        self.stackedWidget.setCurrentWidget(self.windowSupprimerMatiere)
    def modifierMatiere(self):
        self.setupStacked(12)
        self.stackedWidget.setCurrentWidget(self.windowModifierMatiere)
    def afficherMatiere(self):
        self.setupStacked(13)
        self.stackedWidget.setCurrentWidget(self.windowAfficherMatiere)
    def rechercherMatiereCode(self):
        self.setupStacked(14)
        self.stackedWidget.setCurrentWidget(self.windowRechercherMatiereCode)
    def rechercherMatiereSection(self):
        self.setupStacked(15)
        self.stackedWidget.setCurrentWidget(self.windowRechercherMatiereSection)
    def rechercherMatiereSectionSemestre(self):
        self.setupStacked(16)
        self.stackedWidget.setCurrentWidget(self.windowRechercherMatiereSectionSemestre)
    def ajouterNote(self):
        self.setupStacked(17)
        self.stackedWidget.setCurrentWidget(self.windowAjouterNote)
    def supprimerNote(self):
        self.setupStacked(18)
        self.stackedWidget.setCurrentWidget(self.windowSupprimerNote)
    def modfierNote(self):
        self.setupStacked(19)
        self.stackedWidget.setCurrentWidget(self.windowModifierNote)
    def afficherNote(self):
        self.setupStacked(20)
        self.stackedWidget.setCurrentWidget(self.windowAfficherNote)
    def rechercherNoteNumeroInscription(self):
        self.setupStacked(21)
        self.stackedWidget.setCurrentWidget(self.windowRechercherNoteNumeroInscription)
    def rechercherNoteSectionNiveau(self):
        self.setupStacked(22)
        self.stackedWidget.setCurrentWidget(self.windowRechercherNoteSectionNiveau)
    def rechercherNoteNumeroInscriptionSemestre(self):
        self.setupStacked(23)
        self.stackedWidget.setCurrentWidget(self.windowRechercherNoteNumeroInscriptionSemestre)
    def bulletinNoteEtudiant(self):
        self.setupStacked(24)
        self.stackedWidget.setCurrentWidget(self.windowBulletinNoteEtudiant)
    def setupStacked(self,index):
        #index 2
        if(index==2):
            self.windowAjouter=QDialog()
            self.ui1=add(self.ISIMM)
            self.ui1.setupUi(self.windowAjouter)
            self.stackedWidget.addWidget(self.windowAjouter)
        #index 3
        elif(index==3):
            self.windowSupprimer=QDialog()
            self.ui2=remove(self.ISIMM)
            self.ui2.setupUi(self.windowSupprimer)
            self.stackedWidget.addWidget(self.windowSupprimer)
        #index 4
        elif(index==4):
            self.windowModifier=QDialog()
            self.ui3=edit(self.ISIMM)
            self.ui3.setupUi(self.windowModifier)
            self.stackedWidget.addWidget(self.windowModifier)
        #index 5
        elif(index==5):
            self.windowAfficher=QDialog()
            self.ui4=afficher(self.ISIMM)
            self.ui4.setupUi(self.windowAfficher)
            self.stackedWidget.addWidget(self.windowAfficher)
        elif(index==6):
            self.windowRechercherNumeroInscription=QDialog()
            self.ui5=rechercherNumeroInscription(self.ISIMM)
            self.ui5.setupUi(self.windowRechercherNumeroInscription)
            self.stackedWidget.addWidget(self.windowRechercherNumeroInscription)
        elif(index==7):
            self.windowRechercherSection=QDialog()
            self.ui6=rechercherSection(self.ISIMM)
            self.ui6.setupUi(self.windowRechercherSection)
            self.stackedWidget.addWidget(self.windowRechercherSection)
        elif(index==8):
            self.windowRechercherNiveau=QDialog()
            self.ui7=rechercherNiveau(self.ISIMM)
            self.ui7.setupUi(self.windowRechercherNiveau)
            self.stackedWidget.addWidget(self.windowRechercherNiveau)
        elif(index==9):
            self.windowRechercherSectionNiveau=QDialog()
            self.ui8=rechercherSectionNiveau(self.ISIMM)
            self.ui8.setupUi(self.windowRechercherSectionNiveau)
            self.stackedWidget.addWidget(self.windowRechercherSectionNiveau)
        elif(index==10):
            self.windowAjouterMatiere=QDialog()
            self.ui9=ajouterMatiere(self.ISIMM)
            self.ui9.setupUi(self.windowAjouterMatiere)
            self.stackedWidget.addWidget(self.windowAjouterMatiere)
        elif(index==11):
            self.windowSupprimerMatiere=QDialog()
            self.ui10=supprimerMatiere(self.ISIMM)
            self.ui10.setupUi(self.windowSupprimerMatiere)
            self.stackedWidget.addWidget(self.windowSupprimerMatiere)
        elif(index==12):
            self.windowModifierMatiere=QDialog()
            self.ui11=modifierMatiere(self.ISIMM)
            self.ui11.setupUi(self.windowModifierMatiere)
            self.stackedWidget.addWidget(self.windowModifierMatiere)
        elif(index==13):
            self.windowAfficherMatiere=QDialog()
            self.ui12=afficherMatiere(self.ISIMM)
            self.ui12.setupUi(self.windowAfficherMatiere)
            self.stackedWidget.addWidget(self.windowAfficherMatiere)
        elif(index==14):
            self.windowRechercherMatiereCode=QDialog()
            self.ui13=rechercherMatiereCode(self.ISIMM)
            self.ui13.setupUi(self.windowRechercherMatiereCode)
            self.stackedWidget.addWidget(self.windowRechercherMatiereCode)
        elif(index==15):
            self.windowRechercherMatiereSection=QDialog()
            self.ui14=rechercherMatiereSection(self.ISIMM)
            self.ui14.setupUi(self.windowRechercherMatiereSection)
            self.stackedWidget.addWidget(self.windowRechercherMatiereSection)
        elif(index==16):
            self.windowRechercherMatiereSectionSemestre=QDialog()
            self.ui15=rechercherMatiereSectionSemestre(self.ISIMM)
            self.ui15.setupUi(self.windowRechercherMatiereSectionSemestre)
            self.stackedWidget.addWidget(self.windowRechercherMatiereSectionSemestre)
        elif(index==17):
            self.windowAjouterNote=QDialog()
            self.ui16=ajouterNote(self.ISIMM)
            self.ui16.setupUi(self.windowAjouterNote)
            self.stackedWidget.addWidget(self.windowAjouterNote)
        elif(index==18):
            self.windowSupprimerNote=QDialog()
            self.ui17=supprimerNote(self.ISIMM)
            self.ui17.setupUi(self.windowSupprimerNote)
            self.stackedWidget.addWidget(self.windowSupprimerNote)
        elif(index==19):
            self.windowModifierNote=QDialog()
            self.ui18=modifierNote(self.ISIMM)
            self.ui18.setupUi(self.windowModifierNote)
            self.stackedWidget.addWidget(self.windowModifierNote)
        elif(index==20):
            self.windowAfficherNote=QDialog()
            self.ui19=afficherNote(self.ISIMM)
            self.ui19.setupUi(self.windowAfficherNote)
            self.stackedWidget.addWidget(self.windowAfficherNote)
        elif(index==21):
            self.windowRechercherNoteNumeroInscription=QDialog()
            self.ui20=rechercherNoteNumeroInscription(self.ISIMM)
            self.ui20.setupUi(self.windowRechercherNoteNumeroInscription)
            self.stackedWidget.addWidget(self.windowRechercherNoteNumeroInscription)
        elif(index==22):
            self.windowRechercherNoteSectionNiveau=QDialog()
            self.ui21=rechercherNoteSectionNiveau(self.ISIMM)
            self.ui21.setupUi(self.windowRechercherNoteSectionNiveau)
            self.stackedWidget.addWidget(self.windowRechercherNoteSectionNiveau)
        elif(index==23):
            self.windowRechercherNoteNumeroInscriptionSemestre=QDialog()
            self.ui22=rechercherNoteNumeroInscriptionSemestre(self.ISIMM)
            self.ui22.setupUi(self.windowRechercherNoteNumeroInscriptionSemestre)
            self.stackedWidget.addWidget(self.windowRechercherNoteNumeroInscriptionSemestre)
        elif(index==24):
            self.windowBulletinNoteEtudiant=QDialog()
            self.ui23=bulletinNoteEtudiant(self.ISIMM)
            self.ui23.setupUi(self.windowBulletinNoteEtudiant)
            self.stackedWidget.addWidget(self.windowBulletinNoteEtudiant)
        


    def __init__(self,ISIMM):
        self.ISIMM=ISIMM

    def parseStudent(self,line):
        lis=line.split(",")
        lis[8]=lis[8].replace("\n","")
        return Etudiant(lis[0],lis[1],lis[2],lis[3],lis[4],lis[5],lis[6],lis[7],lis[8])   

    def enregistrerEtudiant(self):
        F=open("./Save/SaveEtudiant.csv","w+")
        F.seek(0)
        F.write("Numero d'inscription,Nom,Prenom,Date de naissance,Adresse,Mail,Telephone,Section,Niveau d'etude\n")
        for i in self.ISIMM.Etudiants:
            found=False
            for j in F:
                numI=j.split(",")[0]
                if(numI==i.nInscription):
                    found=True
                    break
            if(not found):
                F.write(i.nInscription+","+i.nom+","+i.prenom+","+str(i.dateN.year())+"/"+str(i.dateN.month())+"/"+str(i.dateN.day())+","+i.adresse+","+i.mail+","+i.telephone+","+i.section+","+i.niveauEtude+"\n")
                
        F.close()
    def recupererEtudiant(self):
        self.ISIMM.Etudiants.clear()
        F=open("./Save/SaveEtudiant.csv","r")
        count=-1
        for line in F:
            count+=1
            if(count==0):
                continue
            self.ISIMM.Etudiants.append(self.parseStudent(line))
            
        F.close()
    def parseMatiere(self,line):
        lis=line.split(",")
        lis[4]=lis[4].replace("\n","")
        return Matiere(lis[0],lis[1],lis[2],lis[3],lis[4])
    def enregistrerMatiere(self):
        F=open("./Save/SaveMatiere.csv","w+")
        F.seek(0)
        F.write("Code Matiere,Designation,Section,Coefficient,Semestre\n")
        for i in self.ISIMM.Matieres:
            found=False
            for j in F:
                code=j.split(",")[0]
                if(code==i.code):
                    found=True
                    break
            if(not found):
                F.write(i.code+","+i.designation+","+i.section+","+i.coefficient+","+i.semestre+"\n")
                
        F.close()
    def recupererMatiere(self):
        self.ISIMM.Matieres.clear()
        F=open("./Save/SaveMatiere.csv","r")
        count=-1
        for line in F:
            count+=1
            if(count==0):
                continue
            self.ISIMM.Matieres.append(self.parseMatiere(line))
            
        F.close()
    
    def parseNote(self,line):
        lis=line.split(",")
        lis[3]=lis[3].replace("\n","")
        return Note(lis[0],lis[1],lis[2],lis[3])
    def enregistrerNote(self):
        F=open("./Save/SaveNote.csv","w+")
        F.seek(0)
        F.write("Numero d'inscription,Code matiere,Note DS,Note EX\n")
        for i in self.ISIMM.Notes:
            found=False
            for j in F:
                code=j.split(",")[1]
                nInscr=j.split(",")[0]
                if(code==i.code and nInscr==i.nInscription):
                    found=True
                    break
            if(not found):
                F.write(i.nInscription+","+i.code+","+i.noteDS+","+i.noteEX+"\n")
                
        F.close()
    def recupererNote(self):
        self.ISIMM.Notes.clear()
        F=open("./Save/SaveNote.csv","r")
        count=-1
        for line in F:
            count+=1
            if(count==0):
                continue
            self.ISIMM.Notes.append(self.parseNote(line))
        self.ISIMM.afficherNotes()     
        F.close()




        
        self.actionAjouter_un_etudiant.triggered.connect(self.ajouterEtudiant)
        self.actionSupprimer_un_etudiant.triggered.connect(self.supprimerEtudiant)
        self.actionEnregistrement_des_etudiants.triggered.connect(self.enregistrerEtudiant)
        self.actionRecuperation_des_etudiants.triggered.connect(self.recupererEtudiant)
        self.actionModifier_un_etudiant.triggered.connect(self.modifierEtudiant)
        self.actionAfficher_les_etudiants.triggered.connect(self.afficherEtudiant)
        self.actionRecherche_par_numero_d_inscription.triggered.connect(self.rechercherNumeroInscription)
        self.actionRecherche_par_Section.triggered.connect(self.rechercherSection)
        self.actionRecherche_par_Niveau.triggered.connect(self.rechercherNiveau)
        self.actionRecherche_par_Section_et_Niveau.triggered.connect(self.rechercherSectionNiveau)

        self.actionAjouter_une_matiere.triggered.connect(self.ajouterMatiere)
        self.actionSupprimer_une_matiere.triggered.connect(self.supprimerMatiere)
        self.actionModifier_une_matiere.triggered.connect(self.modifierMatiere)
        self.actionAfficher_les_matieres.triggered.connect(self.afficherMatiere)
        self.actionRecherche_par_Code.triggered.connect(self.rechercherMatiereCode)
        self.actionRecherche_par_Section_2.triggered.connect(self.rechercherMatiereSection)
        self.actionRecherche_par_Section_et_Semestre.triggered.connect(self.rechercherMatiereSectionSemestre)
        self.actionEnregistrement_des_matieres.triggered.connect(self.enregistrerMatiere)
        self.actionRecuperation_des_matieres.triggered.connect(self.recupererMatiere)

        self.actionAjouter_une_note.triggered.connect(self.ajouterNote)
        self.actionEnregistrement_des_notes.triggered.connect(self.enregistrerNote)
        self.actionRecuperation_des_matieres_2.triggered.connect(self.recupererNote)
        self.actionSupprimer_une_note.triggered.connect(self.supprimerNote)
        self.actionModifier_une_note.triggered.connect(self.modfierNote)
        self.actionAfficher_les_notes.triggered.connect(self.afficherNote)
        self.actionRecherche_par_numero_d_inscription_2.triggered.connect(self.rechercherNoteNumeroInscription)
        self.actionRecherche_par_Section_et_Niveau_2.triggered.connect(self.rechercherNoteSectionNiveau)
        self.actionRecherche_par_numero_d_inscription_et_Semestre.triggered.connect(self.rechercherNoteNumeroInscriptionSemestre)

        self.actionBulletin_de_note_d_un_etudiant.triggered.connect(self.bulletinNoteEtudiant)