#mainwindow

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from AddStudent import Ui_Dialog as add
from DeleteStudent import Ui_Dialog as remove
from EditStudent import Ui_Dialog as edit
from Display import Ui_Dialog as afficher
from Student import Etudiant

class Ui_MainWindow(object):
    def ajouterEtudiant(self):
        self.setupStacked(2)
        self.stackedWidget.setCurrentWidget(self.windowAjouter)

    def supprimerEtudiant(self):
        self.setupStacked(3)
        self.stackedWidget.setCurrentWidget(self.windowSupprimer)
    
    def modifierEtudiant(self):
        self.setupStacked(4)
        self.stackedWidget.setCurrentWidget(self.windowModifier)
    def afficherEtudiant(self):
        self.setupStacked(5)
        self.stackedWidget.setCurrentWidget(self.windowAfficher)

    def setupStacked(self,index):
        #index 2
        if(index==2):
            self.windowAjouter=QDialog()
            self.ui1=add(self.ISIMM)
            self.ui1.setupUi(self.windowAjouter)
            self.stackedWidget.addWidget(self.windowAjouter)
        #index 3
        elif(index==3):
            self.windowSupprimer=QDialog()
            self.ui2=remove(self.ISIMM)
            self.ui2.setupUi(self.windowSupprimer)
            self.stackedWidget.addWidget(self.windowSupprimer)
        #index 4
        elif(index==4):
            self.windowModifier=QDialog()
            self.ui3=edit(self.ISIMM)
            self.ui3.setupUi(self.windowModifier)
            self.stackedWidget.addWidget(self.windowModifier)
        #index 5
        elif(index==5):
            self.windowAfficher=QDialog()
            self.ui4=afficher(self.ISIMM)
            self.ui4.setupUi(self.windowAfficher)
            self.stackedWidget.addWidget(self.windowAfficher)


    def __init__(self,ISIMM):
        self.ISIMM=ISIMM

    def parseStudent(self,line):
        lis=line.split(",")
        lis[8]=lis[8].replace("\n","")
        return Etudiant(lis[0],lis[1],lis[2],lis[3],lis[4],lis[5],lis[6],lis[7],lis[8])   

    def enregistrerEtudiant(self):
        F=open("./Save/SaveEtudiant.csv","w+")
        F.seek(0)
        F.write("Numero d'inscription,Nom,Prenom,Date de naissance,Adresse,Mail,Telephone,Section,Niveau d'etude\n")
        for i in self.ISIMM.Etudiants:
            found=False
            for j in F:
                numI=j.split(",")[0]
                if(numI==i.nInscription):
                    found=True
                    break
            if(not found):
                F.write(i.nInscription+","+i.nom+","+i.prenom+","+str(i.dateN.year())+"/"+str(i.dateN.month())+"/"+str(i.dateN.day())+","+i.adresse+","+i.mail+","+i.telephone+","+i.section+","+i.niveauEtude+"\n")
                
        F.close()
    def recupererEtudiant(self):
        self.ISIMM.Etudiants.clear()
        F=open("./Save/SaveEtudiant.csv","r")
        count=-1
        for line in F:
            count+=1
            if(count==0):
                continue
            self.ISIMM.Etudiants.append(self.parseStudent(line))
            
        F.close()


        self.actionAjouter_un_etudiant.triggered.connect(self.ajouterEtudiant)
        self.actionSupprimer_un_etudiant.triggered.connect(self.supprimerEtudiant)
        self.actionEnregistrement_des_etudiants.triggered.connect(self.enregistrerEtudiant)
        self.actionRecuperation_des_etudiants.triggered.connect(self.recupererEtudiant)
        self.actionModifier_un_etudiant.triggered.connect(self.modifierEtudiant)
        self.actionAfficher_les_etudiants.triggered.connect(self.afficherEtudiant)

#addstudent
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from Student import Etudiant
from PyQt5.QtCore import QDate
class Ui_Dialog(object):
    
    def ajouter(self):
        numInsc=self.lineEditNumeroInscription.text()
        nom=self.lineEditNom.text()
        prenom=self.lineEditPrenom.text()
        date=self.DateNaissance.selectedDate()
        adresse=self.lineEditAdresse.text()
        mail=self.lineEditMail.text()
        telephone=self.lineEditTelephone.text()
        section=self.comboBox.currentText()
        niveau=self.lineEditNiveauEtude.text()
        
        if(not (numInsc.isnumeric() and len(numInsc)>=4)):
            self.showDialog("Invalid Input","Numero d'inscription doit etre numerique de taille minimum 4",True)
            self.lineEditNumeroInscription.setText("")
            return
        if(not (nom.replace(" ","").isalpha())):
            self.showDialog("Invalid Input","Nom doit etre alphabetique",True)
            self.lineEditNom.setText("")
            return
        if(not (prenom.replace(" ","").isalpha())):
            self.showDialog("Invalid Input","Prenom doit etre alphabetique",True)
            self.lineEditPrenom.setText("")
            return
        if(not (date.year()>=2001)):
            self.showDialog("Invalid Input","Année de naissance doit etre au moins 2003",True)
            return
        if(not (adresse.replace(" ","").isalnum() and len(adresse)>=4)):
            self.showDialog("Invalid Input","Adresse doit etre alphanumerique de taille minimimum 4",True)
            return
        if(not (mail.find("@")!=-1 and mail.find(".com")!=-1)):
            self.showDialog("Invalid Input","Mail doit etre de la forme exemple@gmail.com",True)
            return
        if(not (telephone.isnumeric() and len(telephone)==8 and (int(telephone[0]) in {9,5,2}))):
            self.showDialog("Invalid Input","Numero de telephone doit etre de la forme 55436333",True)
            return
        if(not (niveau.isdigit() and int(niveau)<=3)):
            self.showDialog("Invalid Input","niveau doit etre numerique (entre 1 et 3)",True)
            return
        found=False
        for i in self.ISIMM.Etudiants:
            if(i.nInscription==numInsc):
                found=True
                break
        if(found):
            self.showDialog("Invalid Input","Numero d'inscription existe deja",True)
            self.lineEditNumeroInscription.setText("")
            return
        self.showDialog("Success","Ajout Effectué avec succée",False)
        self.ISIMM.ajouterEtudiant(Etudiant(numInsc,nom,prenom,date,adresse,mail,telephone,section,niveau))
        self.resetLineEdit()
    
    def resetLineEdit(self):
        self.lineEditNumeroInscription.setText("")
        self.lineEditNom.setText("")
        self.lineEditPrenom.setText("")
        self.lineEditAdresse.setText("")
        self.lineEditMail.setText("")
        self.lineEditTelephone.setText("")
        self.lineEditNiveauEtude.setText("")

    def __init__(self,ISIMM):
        self.ISIMM=ISIMM
    def showDialog(self,str,detailed,type):
        msgBox = QMessageBox()
        if(type):
            msgBox.setIcon(QMessageBox.Warning)
        else:
            msgBox.setIcon(QMessageBox.Information)
        msgBox.setStyleSheet("width: 100px; font-size:15px;")
        msgBox.setText(str)
        msgBox.setDetailedText(detailed)
        msgBox.setWindowTitle("Error Message")
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec()
    def setupUi(self, Dialog):


    self.DateNaissance.setSelectedDate(QDate(2001,12,26))
    self.Ajouter.clicked.connect(self.ajouter)


#DeleteStudent

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *

class Ui_Dialog(object):
    def deleteEtudiant(self):
        if(self.SupprimerEtudiant.isChecked):
            nInscr=self.comboBoxEtudiant.currentText().split(" ")[0]
            self.ISIMM.Etudiants.remove(self.ISIMM.getEtudiant(nInscr))
        elif(self.SupprimerEtudiantSection.isChecked):
            nInscr=self.comboBoxEtudiantSection2.currentText().split(" ")[0]
            self.ISIMM.Etudiants.remove(self.ISIMM.getEtudiant(nInscr))

            
    def comboChanged(self):
        self.comboBoxEtudiantSection2.clear()
        for i in self.ISIMM.Etudiants:
            if(i.section==self.comboBox.currentText()):
                self.comboBoxEtudiantSection2.addItem(i.nInscription+" "+i.nom+" "+i.prenom)
    def radioToggle(self,radio):
        if(radio==self.SupprimerEtudiant):
            self.comboBoxEtudiant.setVisible(True)
            self.comboBoxEtudiantSection2.setVisible(False)
            self.comboBoxEtudiantNiveau.setVisible(False)
            self.comboBoxEtudiantSectionNiveau.setVisible(False)

            self.comboBox.setVisible(False)
            self.lineEditNiveau.setVisible(False)
            self.lineEditSectionNiveau1.setVisible(False)
            self.lineEditSectionNiveau2.setVisible(False)

            self.comboBoxEtudiant.clear()
            for i in self.ISIMM.Etudiants:
                self.comboBoxEtudiant.addItem(i.nInscription+" "+i.nom+" "+i.prenom)
        elif(radio==self.SupprimerEtudiantSection):
            self.comboBoxEtudiant.setVisible(False)
            self.comboBoxEtudiantSection2.setVisible(True)
            self.comboBoxEtudiantNiveau.setVisible(False)
            self.comboBoxEtudiantSectionNiveau.setVisible(False)

            self.comboBox.setVisible(True)
            self.lineEditNiveau.setVisible(False)
            self.lineEditSectionNiveau1.setVisible(False)
            self.lineEditSectionNiveau2.setVisible(False)

            for i in self.ISIMM.Etudiants:
                if(i.section=="Cycle preparatoire integre (CPI)"):
                    self.comboBoxEtudiantSection2.addItem(i.nInscription+" "+i.nom+" "+i.prenom)
        elif(radio==self.SupprimerEtudiantNiveau):
            self.comboBoxEtudiant.setVisible(False)
            self.comboBoxEtudiantSection2.setVisible(False)
            self.comboBoxEtudiantNiveau.setVisible(True)
            self.comboBoxEtudiantSectionNiveau.setVisible(False)

            self.comboBox.setVisible(False)
            self.lineEditNiveau.setVisible(True)
            self.lineEditSectionNiveau1.setVisible(False)
            self.lineEditSectionNiveau2.setVisible(False)

        elif(radio==self.SupprimerEtudiantSectionNiveau):
            self.comboBoxEtudiant.setVisible(False)
            self.comboBoxEtudiantSection2.setVisible(False)
            self.comboBoxEtudiantNiveau.setVisible(False)
            self.comboBoxEtudiantSectionNiveau.setVisible(True)

            self.comboBox.setVisible(False)
            self.lineEditNiveau.setVisible(False)
            self.lineEditSectionNiveau1.setVisible(True)
            self.lineEditSectionNiveau2.setVisible(True)

    def __init__(self,ISIMM):
        self.ISIMM=ISIMM
    def showDialog(self,str,detailed,type):
        msgBox = QMessageBox()
        if(type):
            msgBox.setIcon(QMessageBox.Warning)
        else:
            msgBox.setIcon(QMessageBox.Information)
        msgBox.setStyleSheet("width: 100px; font-size:15px;")
        msgBox.setText(str)
        msgBox.setDetailedText(detailed)
        msgBox.setWindowTitle("Error Message")
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec()
    def setupUi(self, Dialog):


        self.comboBoxEtudiant.setVisible(False)
        self.comboBoxEtudiantSection2.setVisible(False)
        self.comboBoxEtudiantNiveau.setVisible(False)
        self.comboBoxEtudiantSectionNiveau.setVisible(False)

        self.comboBox.setVisible(False)
        self.lineEditNiveau.setVisible(False)
        self.lineEditSectionNiveau1.setVisible(False)
        self.lineEditSectionNiveau2.setVisible(False)

        self.SupprimerEtudiant.toggled.connect(lambda : self.radioToggle(self.SupprimerEtudiant))
        self.SupprimerEtudiantSection.toggled.connect(lambda : self.radioToggle(self.SupprimerEtudiantSection))
        self.SupprimerEtudiantNiveau.toggled.connect(lambda : self.radioToggle(self.SupprimerEtudiantNiveau))
        self.SupprimerEtudiantSectionNiveau.toggled.connect(lambda : self.radioToggle(self.SupprimerEtudiantSectionNiveau))

        self.comboBox.currentIndexChanged.connect(self.comboChanged)

        self.Supprimer.clicked.connect(self.deleteEtudiant)


#display


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data
        self.columns=["N inscription","Nom","Prenom","Date de Naissance","Adresse","Mail","Telephone","Section","Niveau"]
        

    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self.columns[section])

        

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return 9

alternative=[]
        
        for etudiant in self.ISIMM.Etudiants:
            etu=[]
            etu.append(etudiant.nInscription)
            etu.append(etudiant.nom)
            etu.append(etudiant.prenom)
            etu.append(etudiant.dateN)
            etu.append(etudiant.adresse)
            etu.append(etudiant.mail)
            etu.append(etudiant.telephone)
            etu.append(etudiant.section)
            etu.append(etudiant.niveauEtude)
            alternative.append(etu)

        self.modal=TableModel(alternative)
        
        self.tableView.setModel(self.modal)
        self.horizontal_header = self.tableView.horizontalHeader()
        self.vertical_header = self.tableView.verticalHeader()
        self.horizontal_header.setSectionResizeMode(3)
        self.tableView.horizontalHeader().setStretchLastSection(True)


